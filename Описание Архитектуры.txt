Архитекутра классов
Event Handler - основной класс игры, которйы обрабатывает большинство запросов, начиная от выбора онлайн или офлайн режима игры,
до отображения интерфейса на экране. В классе присутствует функция update, она отвечает за обновление картинки на экране.
Также в этом методе происходит отображение мира на экране, начиная с его генерации. 

Cam_class - вспомогательный класс Event Handler, обрабатывающий входящие нажатия клавиатуры и задает скорость перемещения динамической сетки. Передаёт данные отклика мыши, её координаты в Machine

Machine - ещё один основной класс игры, он отвечает за отображение динамической сетки и перемещение по ней игрока.

Также есть вспомогательные классы:
Ground - обьект pygame типа sprite, его основа - это работа с ячейкой памяти матрицы мира.   

Structure - вспомогательный клас Ground, также является обьектом типа sprite, возникает когда на ячейке есть структура.

Textures - служит для рендера изображений

Online - содержит в себе такие классы как Host и Client и Unknow. Host создает сервер и загружает туда массив данных.
Client реализует подключение к хосту, а также передает изменения и обрабатывает сообщения хоста. Unknow существует чтобы не было ошибок(отпугивает ошибки своей бесполезностью).

Widgets - содержит в себе шаблонные классы, которые максимально полезны при исопльзовании Button, Label, InteractLabel, Surface, BackGround.
P.S Т.к класс PyQt достаточно большой и его виджеты были не такими настраиваемыми, поэтому мы решили сделать свои, более гибкие виджеты, которые можем настраивать под себя.

Interfaces - хранит в себе шаблоны интерфейса и при необходимости создаёт Surface интерфейса, используя вышеупомянутые виджеты.

Наша команда разработчиков следует методолгии разработки V - модели и частично waterfall. Мы имеем представление о том как должна выглядеть окончательная версия проекта и собираемся ему следовать, изредко модифицируя отдельные части.
На каждом этапе проектирования мы проводим детальную проверку работы и взаимодействия основных модулей проекта, т.к мы можем отдельно тестировать модули.
Столпы нашей программы, которые составляют её ядро это Cam_class, Machine, Event_Handler их можно интерпритировать как игровой движок нашего проекта. Остальные классы призваны как-либо взаимодействовать с вышеупомянутой тройкой и помогать ей в работе или расширять их функционал.






